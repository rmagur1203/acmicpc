{
	// Place your acmicpc workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template": {
		"scope": "cpp",
		"prefix": ["acm", "acmicpc", "algo", "algorithm"],
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"#include <queue>",
			"#include <algorithm>",
			"#include <tuple>",
			"#include <unordered_map>",
			"",
			"using namespace std;",
			"",
			"int main(){",
			"    cin.tie(NULL)->sync_with_stdio(false);",
			"",
			"    ",
			"}"
		],
		"description": "startup template for algorithm"
	},
	"binary-search": {
		"prefix": "bs",
		"body": [
			"int bs(int l, int r, int k){",
			"    while(l < r) {",
			"        int mid = (l + r) / 2;",
			"        if (arr[mid] < k)",
			"            l = mid + 1;",
			"        else",
			"            r = mid;",
			"    }",
			"}"
		],
		"description": "binary-search"
	},
	"union-find": {
		"prefix": ["union-find", "uf"],
		"body": [
			"#define MAX 500001",
			"",
			"using namespace std;",
			"",
			"int root[MAX];",
			"int depth[MAX];",
			"int _find(int x)",
			"{",
			"    if (root[x] == x)",
			"        return x;",
			"    else",
			"        return root[x] = _find(root[x]);",
			"}",
			"void _union(int x, int y)",
			"{",
			"    x = _find(x);",
			"    y = _find(y);",
			"    if (x == y) return;",
			"    if (depth[x] < depth[y])",
			"    {",
			"        depth[y] += depth[x];",
			"        root[x] = y;",
			"    }",
			"    else",
			"    {",
			"        depth[x] += depth[y];",
			"        root[y] = x;",
			"    }",
			"}"
		],
		"description": "union-find"
	}
}